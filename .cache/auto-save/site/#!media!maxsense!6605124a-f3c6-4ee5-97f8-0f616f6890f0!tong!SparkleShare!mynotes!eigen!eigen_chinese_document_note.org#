* matrixXd m.resize()否则具有破坏性：系数的值可能会更改。如果你想调整大小()，它不改变系数，使用conservativeResize()
  
* 对于非固定大小的矩阵，不能resize大小，操作合法，但不会生效。
* 固定大小的矩阵or向量在栈上分配内存，因为它在编译时期就可以确定大小
* operator= 将矩阵复制到另一个矩阵中的操作。Eigen自动调整左侧矩阵的大小，使其与右侧大小的矩阵大小匹配。例如：
        MatrixXf a(2, 2);
        std::cout << "a is of size " << a.rows() << "x" << a.cols() << std::endl;
        MatrixXf b(3, 3);
        a = b;
        std::cout << "a is now of size " << a.rows() << "x" << a.cols() << std::endl;
* 对于a = a.transpose()操作，应该使用a.transposeInPlace(),(更改返回值，更改本身)  见TranspositionAndConjugation()

* reduction 矩阵降维操作

* array 也可以用于二维数组

* The finished() method is necessary here to get the actual matrix object once the comma initialization of our temporary submatrix is done. finished 类似于endl，让它立即生成
        mat = (MatrixXf(2, 2) << 0, 1, 1, 0).finished() * mat;
        std::cout << mat << std::endl;
